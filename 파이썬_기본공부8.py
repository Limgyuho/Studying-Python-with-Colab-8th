# -*- coding: utf-8 -*-
"""파이썬 기본공부8

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TsdIJie_cKHhVMCSD-VtCQmFPK1Mm6VQ
"""

#클래스 -> 객체를 표현하기 위한 문법, 프로그래밍으로 객체를 만들 때 사용

# 전사, 마법사, 궁수, 자동차, 비행기, 사람, 강아지, 고양이 -> object 현실, 가상, 개념

# 속성(특징) - attribute
# 기능(능력, 동작, 행동) - method
# 전사 클래스 - HP, MP, 공격력
#             - 공격하다, 방어하다

class Person:
  def Hello(self):
    print("Hello")

jin = Person() # jin은 Person의 인스턴스

jin.Hello()

print(type(jin))


a = []
b = {}

print(type(a))
print(type(b))

a = list(range(10))
b = list(range(20))

# a, b는 객체다.
# a, b는 list 클래스의 인스턴스다.

class Person:
  pass

# 하나의 기능에서 다른 기능을 실행하고 싶을 때 self
class Person:
  def Hello(self):
    print("Hello")

  def hi(self):
    self.Hello()

jin = Person()

jin.Hello()
jin.hi()

#클래스 속성
class Person:
  def __init__(self): # 생성자, Constructor
    print("__init__실행됨")
    self.hello = "안녕하세요"

  def Hi(self):
    print(self.hello)

# a = "안녕하세요"
# print(a))

jin = Person() # 이 때 __init__ 메서드는 실행됐다.
# jin.Hi()

class Person:
  def __init__(self, name, age, hobby):
    self.hello = "안녕하세요"
    self.name = name
    self.age = age
    self.hobby = hobby
    
  def introduce(self):
    print("{} 저는 {} 입니다.".format(self.hello, self.name)) # 클래스 내부에서 접근하고 싶을 때

jin = Person("jin", 22, "운동")

jin.introduce()

print("이름 : {}".format(jin.name)) # 클래스 외부에서 접근하고 싶을 때
print("나이 : {}".format(jin.age))
print("취미 : {}".format(jin.hobby))

paul = Person("paul", 32, "독서")

paul.introduce()

print("이름 : {}".format(paul.name)) # 클래스 외부에서 접근하고 싶을 때
print("나이 : {}".format(paul.age))
print("취미 : {}".format(paul.hobby))

class Person:
  pass

jin = Person() # 인스턴스를 하나 생성해놓고

jin.name = "진" # 나중에 변수와 값을 세팅하겠다

paul = Person()

paul.name = "폴"

print(jin.name)

print(paul.name)

# 클래스 외부에서는 접근 불가, 클래스 내부에서만 사용가능 private attribute
class Person:
  def __init__(self, name, age, hobby, weight):
    self.hello = "안녕하세요"
    self.name = name
    self.age = age
    self.hobby = hobby
    self.__weight = weight # 변수 앞에 __ 를 붙여서 비공개 속성으로 변경

  def diet(self, loss_weight):
    self.__weight -= loss_weight
    print("{}kg 입니다".format(self.__weight))


jin = Person("jin", 22, "운동", 80)

# print(jin.__weight)

jin.diet(15)

# 우리는 삼성 개발자
# 삼성스토어
# TV들에 대한 상품 정리

tv1 = {
    "이름" : "tv1",
    "가격" : 200,
    "크기" : 56
}

tv2 = {
    "이름" : "tv2",
    "가격" : 300,
    "크기" : 60
}

tv3 = {
    "이름" : "tv3",
    "크기" : 60
}

tv4 = {
    "이름" : "tv4",
    "가격" : 150,
    "크기" : 40
}

# print(tv1)
print("이 TV의 이름은 {}이고 가격은 {}만원 이고 사이즈는 {}인치입니다.".format(tv1["이름"], tv1["가격"], tv1["크기"]))

class TV:
  def __init__(self, name, price, size):
    self.name = name
    self.price = price
    self.size = size

tv1 = TV("tv1", 200, 56)
tv2 = TV("tv2", 300, 60)


print("이 TV의 이름은 {}이고 가격은 {}만원 이고 사이즈는 {}인치입니다.".format(tv1.name, tv1.price, tv1.size))

class Warrior:
  def __init__(self, hp, mp, shield, attackPoint):
    self.hp = hp
    self.mp = mp
    self.shield = shield
    self.attackPoint = attackPoint
  
  def attack(self):
    print("공격!")

x = Warrior(1000, 500, 30, 100)

print(x.hp)
print(x.mp)
print(x.shield)
print(x.attackPoint)

x.attack()
#출력 : 공격!

class Warrior:
  def attack(self):
    print("공격!")

x = Warrior()

x.hp = 1000
x.mp = 500
x.shield = 30
x.attackPoint = 100

print(x.hp)
print(x.mp)
print(x.shield)
print(x.attackPoint)

x.attack()
#출력 : 공격!